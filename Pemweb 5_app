const express = require('express');
const mysql = require('mysql');
const bodyparser = require('body-parser');

const app = express(); 
app.use(bodyparser.urlencoded({extended : false}));
app.use(bodyparser.json());

const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password:'',
    database: 'pertemuan5'
});

connection.connect((err) => {
    if(err) {
        console.error("terjadi kesalahan dalam koneksi ke MySql:", err.stack);
        // Add retry mechanism or fallback strategy here
        return;
    }
    console.log("berhasil koneksi ke MySql" + connection.threadId)
});

app.set('view engine', 'ejs'); 

//ini adalah routing (create, read, update, delete)

//ini read
app.get('/', (req, res) => {
    const query = 'SELECT * FROM users';
    connection.query(query, (err, result) => {
        if(err) {
            console.error(err);
            res.status(500).send({ message: 'Error fetching users' });
        } else {
            res.render('index',{users: result});
        }
    });
});

//create / input / insert
app.post('/add', (req, res) => {
    const { name, email, phone } = req.body;
    // Add validation here
    if(!name || !email || !phone) {
        res.status(400).send({ message: 'Invalid input data' });
        return;
    }
    const query = 'INSERT INTO users (name, email, phone) VALUES (?,?,?)';
    connection.query(query, [name, email, phone], (err, result) =>{
        if(err) {
            console.error(err);
            res.status(500).send({ message: 'Error adding user' });
        } else {
            res.redirect('/')
        }
    });
});

//update
app.get('/edit/:id', (req, res) => {
    const query = 'SELECT * FROM users WHERE id = ?';
    connection.query(query, [req.params.id], (err, result) => {
        if(err) {
            console.error(err);
            res.status(500).send({ message: 'Error fetching user' });
        } else if(result.length === 0) {
            res.status(404).send({ message: 'User not found' });
        } else {
            res.render('edit',{user: result[0]});
        }
    });
});

app.post('/update/:id', (req, res) => {
    const { name, email, phone } = req.body;
    console.log('Update request received:', req.body);

    // Add validation here
    if(!name || !email || !phone) {
        console.error('Invalid input data:', req.body);
        res.status(400).send({ message: 'Invalid input data' });
        return;
    }

    const query = 'UPDATE users SET name = ?, email = ?, phone = ? WHERE id = ? ';
    console.log('Update query:', query);

    connection.query(query, [name, email, phone, req.params.id], (err, result) =>{
        if(err) {
            console.error('Error updating user:', err);
            res.status(500).send({ message: 'Error updating user' });
        } else {
            console.log('User updated successfully:', result);
            res.redirect('/')
        }
    });
});

//hapus 
app.get('/delete/:id', (req, res) => {
    const query = 'DELETE FROM users WHERE id = ?';
    connection.query(query, [req.params.id], (err, result) => {
        if(err) {
            console.error(err);
            res.status(500).send({ message: 'Error fetching user' });
        } else if(result.length === 0) {
            res.status(404).send({ message: 'User not found' });
        } else {
            res.redirect('/');
        }
    });
});



app.listen(3001,() =>{
    console.log("server berjalan di port 3001, buka web melalui http://localhost:3001")
});
